背景：
background				： #ff0000 url(/i/eg_bg_03.gif) no-repeat fixed center; 
background-color		：#ff0000;
background-image		：url(/i/eg_bg_03.gif);
background-repeat		：repeat(默认值) no-repeat repeat-x repeat-y inherit(继承);
background-attachment	：(默认值) fixed inherit;
background-position		：(0% 0%)(默认值：左上角) top bottom left right center x% y% xpx ypx;

文本：
color					：#ff0000;
direction				：ltr(默认值) rtl inherit;
line-height				：20px 50%;
letter-spacing			：2px -3px;(字符间距)
word-spacing(字间距)	：2px -5px;
text-align				：left(默认值) right center inherit;
text-decoration			：none(默认值) underline overline line-through blink(闪烁) inherit;
text-indent				：20px(默认值为0);  //(文本首行缩进)
text-transform			：none(默认值) capitalize(每个单词以大写字母开头) uppercase lowercase inherit;
white-space				：normal(默认值) nowrap(文本不换行);  //(文本是否折行)
text-overflow			：clip(默认值：修剪文本) ellipsis(显示省略符号来代表被修剪的文本);  //(文本溢出时如何显示)

字体：
font-family				：Times, TimesNR, 'New Century Schoolbook', Georgia, 'New York', serif;
font-size				：20px;
font-style				：normal(默认值) italic(斜体) oblique(倾斜) inherit;
font-weight				：normal(默认值) bold bolder(更粗的) lighter(更细的) inherit 400px;
font					：italic bold 12px/30px arial,sans-serif;

链接：
a：link 					- 普通的、未被访问的链接
a：visited 				- 用户已访问的链接
a：hover				 	- 鼠标指针位于链接上
a：active 				- 链接被点击的时刻

列表：
list-style-image		：url("/i/arrow.gif");
list-style-type			：disc(默认值：实心圆) none circle(空心圆) square(实心方块) decimal(数字);
list-style				：square inside url('/i/arrow.gif');

表格：
border(表格边框)		：1px solid #ff0000;
border-collapse			：collapse; //需设置在table上，然后在td上添加边框。 //(折叠边框)
border-spacing			：20px 20px;  //(表格单元格间距)
caption-side			：top bottom inherit;
empty-cells(空单元格)	：show(默认值：给空单元格绘制边框) hide(不绘制边框) inherit;

表单：
disabled				：disabled; 匹配每个禁用的的元素（主要用于表单元素）。
disabled="iphone.count === 0";

轮廓：
outline-color			：red;
outline-style			：none(默认值：无轮廓) solid dotted(点状);
outline-width			：5px thin;
outline					：red solid 5px;

内边距：
padding					：20px 20px 30px 20px;(上右下左)
padding-top				：20px 10%;
padding-right			：20px 10%;
padding-bottom			：30px 10%;
padding-left			：20px 10%;

边框：
border					：2px solid #ff0000;
border-width			：2px;
border-style			：solid;
border-color			：#ff0000;
border-top				：thick dotted #ff0000;
border-top-width		：thick;
border-top-style		：dotted;
border-top-color		：#ff0000;

外边距：
margin					：30px 20xp 30px 20px;
margin-top				：30px;
margin-right			：20px;
margin-bottom			：30px;
margin-left				：20px;
一个值代表四个边
二个值代表 上下  左右
三个值代表 上 左右  下
四个值代表 上 右  下  左

absolute
生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。
元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。
绝对定位的元素的位置相对于最近的已定位祖先元素，如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块。
相对定位是“相对于”元素在文档中的初始位置，
而绝对定位是“相对于”最近的已定位祖先元素，如果不存在已定位的祖先元素，那么“相对于”最初的包含块。
fixed
生成绝对定位的元素，相对于浏览器窗口进行定位。
元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。
relative
生成相对定位的元素，相对于其正常位置进行定位。
因此，"left：20" 会向元素的 LEFT 位置添加 20 像素。
static
默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。
inherit
规定应该从父元素继承 position 属性的值。

定位：
position				：static(默认值) relative(相对定位) absolute(绝对定位) fixed(固定定位) inherit;
top						：20px;
right					：20px;
bottom					：20px;
left					：20px;
overflow				：visible(默认值：内容不会被修剪，在框之外) hidden(内容被修剪) scroll auto(如果内容过多，会出现滚动框) inherit;
//用于显示/隐藏子元素，有重要作用。
clip(裁剪)				：auto(默认值) rect(top,right,bottom,left) inherit;(设置为绝对定位裁剪) 
vertical-align			：baseline(默认值：放在父元素的基线上) text-top text-bottom inherit;  //(垂直对齐方式)
z-index					：0(默认值) -1 2;(设置为绝对定位堆叠)

浮动：
float					：none(默认值) left right inherit;
clear					：none(默认值：允许浮动出现在两侧) left(左侧不允许浮动元素) right both inherit;

选择器：
h1, h2, h3, h4, h5, h6 {
  color：gray;
  background： white;
  padding： 10px;
  border： 1px solid black;
  font-family： Verdana;
  }

p.important {color：red;}
h1.important {color：blue;}

<style type="text/css">
.important {font-weight：bold;}
.warning {font-style：italic;}
.important.warning {background：silver;}
</style>
<body>
<p class="important">This paragraph is very important.</p>
<p class="warning">This is a warning.</p>
<p class="important warning">This paragraph is a very important warning.</p>

类选择器还是 ID 选择器？(id)
区别 1：只能在文档中使用一次
与类不同，在一个 HTML 文档中，ID 选择器会使用一次，而且仅一次。
区别 2：不能使用 ID 词列表
不同于类选择器，ID 选择器不能结合使用，因为 ID 属性不允许有以空格分隔的词列表。

a[href] {color：red;}

h1 em {color：red;}(后代选择器：只对 h1 元素中的 em 元素应用样式)

把第一个 h1 下面的两个 strong 元素变为红色，但是第二个 h1 中的 strong 不受影响：
<h1>This is <strong>very</strong> <strong>very</strong> important.</h1>
<h1>This is <em>really <strong>very</strong></em> important.</h1>
h1 > strong {color：red;}(子元素选择器)

相邻兄弟选择器
<style type="text/css">
h1 + p {margin-top：50px;}
</style>
</head>
<body>
<h1>This is a heading.</h1>
<p>This is paragraph.</p>

伪类：
：link
：visited
：hover
：active
：focus(向拥有键盘输入焦点的元素添加样式。)
input：focus{
	background-color：yellow;
}
：first-child(向元素的第一个子元素添加样式。)
p：first-child
{
	font-weight：bold
} 
：lang(向带有指定 lang 属性的元素添加样式。)
<style type="text/css">
q：lang(no)
 {
	quotes： "~" "~"
 }
</style>
</head>
<body>
<p>Some text <q lang="no">A quote in a paragraph</q> Some text.</p>
</body>

伪元素：
：first-letter			：向文本的第一个字母添加特殊样式。
：first-line				：向文本的首行添加特殊样式。
：before					：在元素之前添加内容。
：after					：在元素之后添加内容。
在每个h1元素之前插入一个图片
h1：before{
	content：url(/i/w3school_logo_white.gif);
}

css水平对齐：

1.使用 margin 属性来水平对齐(整体水平对齐)
margin：auto;
width：70%;
background-color：#b0e0e6;

text-align：center(文本居中对齐)

2.使用 position 属性进行左和右对齐
position：absolute;
right：0px;
width：300px;
background-color：#b0e0e6;

3.使用 float 属性来进行左和右对齐
float：right;
width：300px;
background-color：#b0e0e6;

css尺寸属性（元素）：
height					：auto(默认值) 20px 50% inherit;
width					：auto(默认值) 20px 20% inherit;
max-height				：设置元素的最大高度。
max-width				：设置元素的最大宽度。
min-height				：设置元素的最小高度。
min-width				：设置元素的最小宽度。

css分类属性：
cursor：
<p>请把鼠标移动到单词上，可以看到鼠标指针发生变化：</p>
<span style="cursor：auto">
Auto</span><br />
<span style="cursor：crosshair">
Crosshair</span><br />
<span style="cursor：default">
Default</span><br />
<span style="cursor：pointer">
Pointer</span><br />
<span style="cursor：move">
Move</span><br />
<span style="cursor：e-resize">
e-resize</span><br />
<span style="cursor：ne-resize">
ne-resize</span><br />
<span style="cursor：nw-resize">
nw-resize</span><br />
<span style="cursor：n-resize">
n-resize</span><br />
<span style="cursor：se-resize">
se-resize</span><br />
<span style="cursor：sw-resize">
sw-resize</span><br />
<span style="cursor：s-resize">
s-resize</span><br />
<span style="cursor：w-resize">
w-resize</span><br />
<span style="cursor：text">
text</span><br />
<span style="cursor：wait">
wait</span><br />
<span style="cursor：help">
help</span>

display					：inline(默认值：行内) block none(此元素不会被显示) inline-block(行内块元素) inherit;  //(设置是否及如何显示元素)
visibility				：visible(默认值：设置元素是可见的) hidden collapse(与empty-cells：hide效果类似) inherit;  //(设置元素可见或不可见)
backface-visibility(背面是否可见)

opacity(透明度)			：从 0.0 （完全透明）到 1.0（完全不透明） inherit;

css3：
新的边框属性：
border-image			：url(border.png) 30 30 round/stretch;  //(围绕边框的图像)
border-radius			：25px;50% //(圆角边框)
box-shadow				： 10px 10px 5px #888888;  //(添加边框阴影)
box-shadow				： h-shadow(水平阴影的位置，必填) v-shadow(垂直阴影的位置，必填) blur(模糊距离) spread(阴影尺寸) color inset;

新的背景属性：
background-clip			：border-box(默认值：背景被裁剪到边框盒) padding-box(背景被裁剪到内边距框) content-box(背景被裁剪到内容框);  //(背景图像被裁剪)
background-origin		：padding-box(默认值) border-box content-box;  //(背景图像相对于什么来定位)
background-size			：30%(宽度) 100%(高度);

新的文本属性：
text-shadow				：5px 5px 5px #FF0000;
word-wrap(换行)			：normal(默认值：可能会溢出) break-word(强制换行)

新的字体：
<style> 
@font-face
{
font-family： myFirstFont;
src： url('/example/css3/Sansation_Light.ttf')
    ,url('/example/css3/Sansation_Light.eot'); /* IE9+ */
}
div
{
font-family：myFirstFont;
}
</style>

新的转换属性(2D)：
transform				：rotate(7deg);
transform-origin		：20% 40%;  //(改变被转换元素的位置)

新的转换属性(3D)：
transform-style			：flat(默认值：子元素将不保留其 3D 位置) preserve-3d(子元素将保留其 3D 位置);  //(被嵌套元素如何在 3D 空间中显示)
perspective(透视)		：none(默认值：无透视) 150;
perspective-origin		：10% 20%;  //(底部位置)
backface-visibility		：visible(默认值：可见的) hidden(不可见);  //(不面向屏幕时/背面是否可见)

过渡属性：
transition							：width 2s , height 2s;
transition-property					：all(默认值：所以属性均会过渡) none width,height;
transition-duration					：0(默认值) 2s;
transition-timing-function			：ease(默认值：慢速开始，然后变快，然后慢速结束) linear(相同速度开始至结束);  //(过渡效果的时间曲线)
transition-delay					：0(默认值) 2s;

动画属性：
@keyframes mymove
{
0%   {top：0px; left：0px; background：red;}
25%  {top：0px; left：100px; background：blue;}
50%  {top：100px; left：100px; background：yellow;}
75%  {top：100px; left：0px; background：green;}
100% {top：0px; left：0px; background：red;}
}
animation-name					：mymove;
animation-duration				：2s;
animation-timing-function		：ease(默认值：慢速开始，然后变快，然后慢速结束) linear(相同速度开始至结束);
animation-delay					：2s -2s;
animation-iteration-count		：0(默认值) 4 infinite(无限次);  //(动画播放次数)
animation-direction				： normal(默认值) alternate(轮流反向播放);
animation-play-state			： running(默认值) paused;  //(动画是否正在运行或暂停)
animation						：myfirst 5s linear 2s infinite alternate; 

新的多列属性：
column-count					：auto(默认值) 3;
column-width					：auto(默认值) 100px;
column-gap(列之间的间隔)		：normal(默认值) 40px;
column-rule						：4px outset #ff0000;
column-rule-width				：medium(默认值) thin thick 2px;
column-rule-style				：none(默认值) solid outset;
column-rule-color				：#ff0000;
column-span(标题横跨的列数)	：1(默认值) all;
columns							：auto auto(默认值) 100px(column-width) 3(column-count);



注意：
display							：none;
visible							：hidden;
这两个隐藏的区别，一个隐藏不占原来的位置，一个隐藏占原来的位置














